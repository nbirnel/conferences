Steve Hastings

def foo(x):
  'docstring'
  return x

foo.__name__
foo.__doc__
help(foo)
alias = add5
alias.__name__
# add5

@my_decorator
def add5(x):
  return x + 5

equivalent to 
add5 = my_decorator(add5)

no-op decorator
===============
def my_decorartor(fn):
  return fn

record types of functions
=========================
# Web frameworks, unit-test frameworks
lst_type_a = []

def type_a(fn):
  lst_type_a.append(fn)

any callable object (ie object with a .__call__() method, could be a decorator

wrap a function
===============

